# –ó–¥–µ—Å—å –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Telegram-–±–æ—Ç–∞

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from quiz_data import quiz_questions, animal_ids, animal_profiles

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

def setup_handlers(app):
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_answer, pattern="^[0-2]$"))
    app.add_handler(CallbackQueryHandler(restart_quiz, pattern="^restart$"))
    app.add_handler(CallbackQueryHandler(feedback_prompt, pattern="^feedback$"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, receive_feedback))

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data[user_id] = {
        "score": {key: 0 for key in animal_ids},
        "current_q": 0,
        "expecting_feedback": False
    }
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ü—Ä–∏–≤–µ—Ç, {0}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞! ü¶Å\n\n–û—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –∏ –º—ã –æ–ø—Ä–µ–¥–µ–ª–∏–º —Ç–≤–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ.".format(update.effective_user.first_name)
    )
    await send_question(update, context)

async def send_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    state = user_data[user_id]
    q_index = state["current_q"]

    if q_index >= len(quiz_questions):
        await show_result(update, context)
        return

    question = quiz_questions[q_index]
    buttons = [
        [InlineKeyboardButton(opt, callback_data=str(i))] 
        for i, opt in enumerate(question["options"])
    ]
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=question["text"],
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    answer_index = int(query.data)

    state = user_data[user_id]
    current_question = state["current_q"]

    # –£–≤–µ–ª–∏—á–∏—Ç—å —Å—á—ë—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∂–∏–≤–æ—Ç–Ω–æ–º—É
    chosen_animal = animal_ids[answer_index]
    state["score"][chosen_animal] += 1

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    state["current_q"] += 1
    await send_question(update, context)

async def show_result(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    score = user_data[user_id]["score"]

    # –ù–∞–π—Ç–∏ –∂–∏–≤–æ—Ç–Ω–æ–µ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –æ—á–∫–æ–≤
    best_animal_id = max(score, key=score.get)
    profile = animal_profiles[best_animal_id]

    with open(profile["image_path"], "rb") as img:
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=img,
            caption=f"{profile['description']}\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ!"
        )

    # –ö–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    buttons = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑", callback_data="restart")
        ],
        [
            InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="feedback")
        ]
    ])
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–•–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤?",
        reply_markup=buttons
    )

async def restart_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    user_data[user_id] = {
        "score": {key: 0 for key in animal_ids},
        "current_q": 0,
        "expecting_feedback": False
    }
    await send_question(update, context)

async def feedback_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    user_data[user_id]["expecting_feedback"] = True

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:"
    )

# –û—Ç–∑—ã–≤
async def receive_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in user_data and user_data[user_id].get("expecting_feedback"):
        user_data[user_id]["expecting_feedback"] = False
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –û–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ üì®"
        )

        # –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
        button = InlineKeyboardMarkup([[InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑", callback_data="restart")]])
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–•–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É —Å–Ω–æ–≤–∞?",
            reply_markup=button
        )
